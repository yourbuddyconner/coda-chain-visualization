{"version":3,"sources":["logo.svg","client.js","constants.js","transactions/transactions.js","transactions/legend.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","cache","InMemoryCache","link","HttpLink","uri","ApolloClient","name","version","queryDeduplication","defaultOptions","watchQuery","fetchPolicy","useState","React","useEffect","useRef","GET_BLOCKS","useCallback","gql","DynamicGraph","state","nodes","links","data","setData","nodeIndex","setNodeIndex","linkIndex","setLinkIndex","prevStateRef","current","prevState","useQuery","pollInterval","query_data","loading","error","fgRef","refetch","fg","chargeForce","d3","strength","node","distanceMin","d3Force","knownKeys","require","filterOn","receivedTransactions","blocks","forEach","blockProducer","creator","transactions","userCommands","command","key","from","to","totalFees","parseInt","fee","totalSent","amount","totalTransactions","id","target","source","type","feeTransfer","transfer","recipient","observedKeys","Object","keys","map","txKey","tx","flat","newNodes","filter","item","pos","indexOf","publicKey","newLinks","values","undefined","console","log","index","newNode","length","d3VelocityDecay","ref","enableNodeDrag","nodeLabel","substring","linkLabel","linkCurvature","linkDirectionalArrowLength","linkWidth","nSent","linkColor","graphData","Legend","Svg","append","attr","style","text","height","width","Control","filterGraph","class","className","onClick","App","setState","Boolean","window","location","hostname","match","ReactDOM","render","client","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yLAAAA,EAAOC,QAAU,IAA0B,kC,2kbCO9BC,EAAQ,IAAIC,IACZC,EAAO,IAAIC,IAAS,CAC/BC,ICTwB,uCDYX,MAAIC,IAAa,CAE9BL,MAAOA,EACPE,KAAMA,EAGNI,KAAM,mBACNC,QAAS,MACTC,oBAAoB,EACpBC,eAAgB,CACdC,WAAY,CACVC,YAAa,wB,8hBEdXC,EAA4CC,IAA5CD,SAAUE,EAAkCD,IAAlCC,UAAWC,EAAuBF,IAAvBE,OA8QvBC,GA9Q8CH,IAAfI,YA8QlBC,IAAH,MAsBDC,EAlSM,SAACC,GAAW,IAAD,EACJR,EAAS,CAAES,MAAO,GAAIC,MAAO,KADzB,mBACrBC,EADqB,KACfC,EADe,OAEMZ,EAAS,IAFf,mBAErBa,EAFqB,KAEVC,EAFU,OAMMd,EAAS,IANf,mBAMrBe,EANqB,KAMVC,EANU,KAWtBC,EAAed,EAAOK,GAC5BN,GAAU,WACNe,EAAaC,QAAUV,KAE3B,IAAMW,EAAYF,EAAaC,QAfH,EAiB0BE,YAAShB,EAAY,CAACiB,aAAc,MAA5DC,GAjBF,EAiBpBC,QAjBoB,EAiBXC,MAjBW,EAiBJb,MAClBc,GAlBsB,EAiBcC,QAC5BvB,KAEdD,GAAU,WACN,IAAMyB,EAAKF,EAAMP,QACbU,EAAcC,MAClBD,EAAYE,UAAS,SAACC,GAClB,OAAQ,OAEZH,EAAYI,YAAY,GAExBL,EAAGM,QAAQ,SAAUL,MAQzB,IAAMM,EAAYC,EAAQ,KACpBC,EAAW5B,EAAM4B,SAEnBC,EAAuB,GACtBf,GACDA,EAAWgB,OAAO7B,MAAM8B,SAAQ,SAAAR,GAC5B,IAAMS,EAAgBT,EAAKU,QAGT,iBAAdL,GAA8C,QAAdA,GAEhCL,EAAKW,aAAaC,aAAaJ,SAAQ,SAAAK,GACnC,IAAMC,EAAM,eAAiBD,EAAQE,KAAO,IAAMF,EAAQG,GACrDF,KAAOR,GACRA,EAAqBQ,GAAKG,WAAaC,SAASL,EAAQM,KACxDb,EAAqBQ,GAAKM,WAAaF,SAASL,EAAQQ,QACxDf,EAAqBQ,GAAKQ,mBAAqB,GAG/ChB,EAAqBQ,GAAO,CACxBS,GAAIT,EACJU,OAAQX,EAAQG,GAChBS,OAAQZ,EAAQE,KAChBW,KAAM,cACNT,UAAWC,SAASL,EAAQM,KAC5BC,UAAWF,SAASL,EAAQQ,QAC5BC,kBAAmB,MAKlB,oBAAbjB,GAAgD,QAAdA,GAElCL,EAAKW,aAAaC,aAAaJ,SAAQ,SAAAK,GACnC,IAAMC,EAAM,kBAAoBD,EAAQE,KAAON,EAC1CK,KAAOR,GACRA,EAAqBQ,GAAKM,WAAaF,SAASL,EAAQM,KACxDb,EAAqBQ,GAAKQ,mBAAqB,GAG/ChB,EAAqBQ,GAAO,CACxBS,GAAIT,EACJU,OAAQf,EACRgB,OAAQZ,EAAQE,KAChBW,KAAM,iBACNN,UAAWF,SAASL,EAAQM,KAC5BF,UAAW,EACXK,kBAAmB,MAMjB,iBAAdjB,GAA8C,QAAdA,GAEhCL,EAAKW,aAAagB,YAAYnB,SAAQ,SAAAoB,GAClC,IAAMd,EAAM,eAAiBL,EAAgB,IAAMmB,EAASC,UACvDf,KAAOR,GACRA,EAAqBQ,GAAKG,WAAaC,SAASU,EAAST,KACzDb,EAAqBQ,GAAKQ,mBAAqB,GAG/ChB,EAAqBQ,GAAO,CACxBS,GAAIT,EACJU,OAAQI,EAASC,UACjBJ,OAAQhB,EACRiB,KAAM,cACNN,UAAWF,SAASU,EAAST,KAC7BF,UAAW,EACXK,kBAAmB,SAQ3C,IAGMQ,EAHOC,OAAOC,KAAK1B,GAGG2B,KAAI,SAACC,GAC7B,IAAIC,EAAK7B,EAAqB4B,GAC9B,MAAO,CAACC,EAAGV,OAAQU,EAAGX,WACvBY,OAaGC,EAVcP,EAAaQ,QAAO,SAASC,EAAMC,GACnD,OAAOV,EAAaW,QAAQF,IAASC,KAKbF,QAAO,SAACxB,GAChC,QAASA,KAAOhC,MAGKmD,KAAI,SAAAnB,GACzB,MAAO,CACHS,GAAIT,EACJnD,KAAMwC,EAAUW,GAChB4B,UAAW5B,MAOb6B,EAFgBZ,OAAOa,OAAOtC,GAELgC,QAAO,SAAC/E,GAEnC,QADYA,EAAKgE,MACDvC,MA4DpB,OAvDKP,IAAUW,QAA2ByD,IAAdzD,IACxB0D,QAAQC,IAAItE,EAAOW,GACnBP,GAAQ,YAAoB,EAAlBH,MAAkB,EAAXC,MACb,MAAO,CACHD,MAAO,GACPC,MAAO,OAGfI,GAAa,SAACiE,GACV,MAAO,MAEX/D,GAAa,SAAC+D,GACV,MAAO,MAEX9D,EAAaC,QAAUV,GAItB4D,GACDA,EAAS7B,SAAQ,SAAAyC,GACbpE,GAAQ,YAAqB,IAAnBH,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,MAKb,OAJAI,GAAa,SAACiE,GAEV,OADAA,EAAMC,EAAQ1B,IAAM7C,EAAMwE,OACnBF,KAEJ,CACHtE,MAAM,GAAD,mBAAMA,GAAN,CAAauE,IAClBtE,MAAOA,SAOlBgE,GACDA,EAASnC,SAAQ,SAAAjD,GACRA,EAAKiE,UAAU1C,GAAavB,EAAKkE,UAAU3C,GAC5CD,GAAQ,YAAqB,IAAnBH,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,MAKb,OAJAM,GAAa,SAAC+D,GAEV,OADAA,EAAMzF,EAAKgE,IAAM5C,EAAMuE,OAChBF,KAEJ,CACHtE,MAAOA,EACPC,MAAM,GAAD,mBAAMA,GAAN,CAAapB,WAW/B,kBAAC,IAAD,CACP4F,gBAAiB,GACjBC,IAAK1D,EACL2D,gBAAgB,EAChBC,UAAW,SAACtD,GACR,MAAM,YAAN,OAAmBA,EAAKrC,KAAxB,uCACcqC,EAAK0C,UAAUa,UAAU,EAAE,GADzC,eAIJC,UAAW,SAACjG,GACR,MAAkB,gBAAdA,EAAKmE,KACC,kBAAN,OAAyBnE,EAAKkE,OAAO9D,KAArC,eAAgDJ,EAAKiE,OAAO7D,KAA5D,mDACsBJ,EAAK+D,kBAD3B,2CAEc/D,EAAK6D,UAFnB,wBAKc,gBAAd7D,EAAKmE,KACC,kBAAN,OAAyBnE,EAAKkE,OAAO9D,KAArC,eAAgDJ,EAAKiE,OAAO7D,KAA5D,gDACmBJ,EAAK+D,kBADxB,+CAEkB/D,EAAK6D,UAFvB,wBAKc,mBAAd7D,EAAKmE,KACC,qBAAN,OAA4BnE,EAAKkE,OAAO9D,KAAxC,eAAmDJ,EAAKiE,OAAO7D,KAA/D,gDACmBJ,EAAK+D,kBADxB,gDAEmB/D,EAAK6D,UAFxB,6BADJ,GAOJqC,cAAe,IACfC,2BAA4B,EAC5BC,UAAW,SAACpG,GACIA,EAAK+D,kBAAjB,IAOMsC,EAAQrG,EAAK6D,UACnB,OAAIwC,GAAS,GAAW,EACpBA,EAAQ,IAAY,EACpBA,EAAQ,IAAY,EACpBA,EAAQ,IAAY,EACpBA,EAAQ,IAAa,EACrBA,EAAQ,KAAa,EAClB,IAEXC,UAAW,SAACtG,GAKR,MAAkB,gBAAdA,EAAKmE,KAA+B,OACtB,gBAAdnE,EAAKmE,KAA+B,SACtB,mBAAdnE,EAAKmE,KAAkC,MACpC,SAGXoC,UAAWlF,KC/QGT,G,OAAkCD,IAA5CD,SAA4CC,IAAlCC,WA8BH4F,GA9BqC7F,IAAvBE,OAAuBF,IAAfI,YAOtB,WAiBX,OAfAH,GAAU,WACN,IAAI6F,EAAMlE,IAAU,gBAEpBkE,EAAIC,OAAO,QAAQC,KAAK,IAAI,IAAIA,KAAK,IAAI,IAAIA,KAAK,QAAS,IAAIA,KAAK,SAAU,GAAGC,MAAM,OAAQ,QAC/FH,EAAIC,OAAO,QAAQC,KAAK,IAAI,IAAIA,KAAK,IAAI,IAAIA,KAAK,QAAS,IAAIA,KAAK,SAAU,GAAGC,MAAM,OAAQ,OAC/FH,EAAIC,OAAO,QAAQC,KAAK,IAAI,IAAIA,KAAK,IAAI,KAAKA,KAAK,QAAS,IAAIA,KAAK,SAAU,GAAGC,MAAM,OAAQ,UAGhGH,EAAIC,OAAO,QAAQC,KAAK,IAAK,IAAIA,KAAK,IAAK,IAAIE,KAAK,iBAAiBD,MAAM,YAAa,QAAQD,KAAK,qBAAqB,UAC1HF,EAAIC,OAAO,QAAQC,KAAK,IAAK,IAAIA,KAAK,IAAK,IAAIE,KAAK,oBAAoBD,MAAM,YAAa,QAAQD,KAAK,qBAAqB,UAC7HF,EAAIC,OAAO,QAAQC,KAAK,IAAK,IAAIA,KAAK,IAAK,KAAKE,KAAK,iBAAiBD,MAAM,YAAa,QAAQD,KAAK,qBAAqB,UAE3HF,EAAIC,OAAO,UAAUC,KAAK,KAAM,IAAIA,KAAK,KAAK,KAAKA,KAAK,IAAK,IAAIC,MAAM,OAAQ,QAC/EH,EAAIC,OAAO,QAAQC,KAAK,IAAK,IAAIA,KAAK,IAAK,KAAKE,KAAK,UAAUD,MAAM,YAAa,QAAQD,KAAK,qBAAqB,aAGpH,6BACI,yBAAK3C,GAAG,cAAc8C,OAAO,MAAMC,MAAM,WCtB7CrG,EAA6CC,IAA7CD,SAA6CC,IAAnCC,UAAmCD,IAAxBE,OAAwBF,IAAhBI,YAErC,SAASiG,EAAT,GAAmC,IAAhBC,EAAe,EAAfA,YACjB,OACE,yBAAKC,MAAM,iBACT,yBAAKC,UAAU,cAAcC,QAAS,kBAAMH,EAAY,kBAAiB,kBAAC,IAAD,OACzE,yBAAKE,UAAU,cAAcC,QAAS,kBAAMH,EAAY,kBAAiB,kBAAC,IAAD,OACzE,yBAAKE,UAAU,cAAcC,QAAS,kBAAMH,EAAY,qBAAoB,kBAAC,IAAD,OAC5E,yBAAKE,UAAU,cAAcC,QAAS,kBAAMH,EAAY,SAAQ,kBAAC,IAAD,QAgCvDI,MA1Bf,WAAgB,IAAD,EACa3G,EAAS,CAACoC,SAAU,iBADjC,mBACN5B,EADM,KACCoG,EADD,KAGb,OACE,yBAAKH,UAAU,OACb,yBAAKA,UAAU,UACb,kDAEF,yBAAKA,UAAU,iBACb,kBAACH,EAAD,CAASC,YAAa,SAACnE,GACrBwE,EAAS,CAAExE,SAAUA,OAEvB,yBAAKqE,UAAU,UACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,SACb,kBAAC,EAAD,CAAcrE,SAAU5B,EAAM4B,eC1BpByE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,IAAD,CAAgBC,OAAQA,GACtB,kBAAC,EAAD,OAEHC,SAASC,eAAe,SDoHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.72e568d5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\n\nimport { DAEMON_URL } from './constants';\n\n// Instantiate required constructor fields\nexport const cache = new InMemoryCache();\nexport const link = new HttpLink({\n  uri: DAEMON_URL\n});\n\nexport default new ApolloClient({\n  // Provide required constructor fields\n  cache: cache,\n  link: link,\n\n  // Provide some optional constructor fields\n  name: 'react-web-client',\n  version: '1.3',\n  queryDeduplication: false,\n  defaultOptions: {\n    watchQuery: {\n      fetchPolicy: 'cache-and-network',\n    },\n  },\n});","export const DAEMON_URL = 'https://graphql.o1test.net/graphql'\n//export const DAEMON_URL = 'http://localhost:8010/proxy/graphql'","import React from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nimport { forOfStatement } from '@babel/types';\nimport { ForceGraph2D, ForceGraph3D } from 'react-force-graph';\nimport _ from \"lodash\";\nimport Rainbow from \"rainbowvis.js\"\nimport * as d3 from \"d3\"\n\nconst { useState, useEffect, useRef, useCallback} = React;\n\nconst DynamicGraph = (state) => {\n    const [data, setData] = useState({ nodes: [], links: [] });\n    const [nodeIndex, setNodeIndex] = useState({})\n    //    [node.publicKey]: {\n    //        index: int\n    //    }\n    const [linkIndex, setLinkIndex] = useState({})\n    //    [tx.to + tx.from]: {\n    //        index: int\n    //    } \n\n    const prevStateRef = useRef(state);\n    useEffect(() => {\n        prevStateRef.current = state;\n    });\n    const prevState = prevStateRef.current;\n\n    const { loading, error, data: query_data, refetch } = useQuery(GET_BLOCKS, {pollInterval: 10000});\n    const fgRef = useRef();\n    //Set the force sim\n    useEffect(() => {\n        const fg = fgRef.current;\n        let chargeForce = d3.forceManyBody()\n        chargeForce.strength((node) => { \n            return -100;\n        })\n        chargeForce.distanceMin(5)\n\n        fg.d3Force('charge', chargeForce);\n    })\n    // General Idea: \n    // maintain a second state which is a nice format of what nodes and links do you have now\n    // when you get data, you use the second state to compute which nodes/links are new\n    // then you update both the first (graph) and second state with the data \n\n    // Known Public Keys (for labels)\n    const knownKeys = require('../knownKeys.json');\n    const filterOn = state.filterOn;\n    // Parse Out Various Kinds of Transactions\n    let receivedTransactions = {};\n    if ( query_data ) { \n        query_data.blocks.nodes.forEach(node => {\n            const blockProducer = node.creator\n            \n            // If we should display userCommands\n            if (filterOn ===  \"userCommands\" || filterOn ===  \"all\") { \n                // Get User Commands\n                node.transactions.userCommands.forEach(command => {\n                    const key = \"userCommand-\" + command.from + \"-\" + command.to\n                    if ( key in receivedTransactions ){\n                        receivedTransactions[key].totalFees += parseInt(command.fee)\n                        receivedTransactions[key].totalSent += parseInt(command.amount)\n                        receivedTransactions[key].totalTransactions += 1\n                    } \n                    else {\n                        receivedTransactions[key] = {\n                            id: key,\n                            target: command.to,\n                            source: command.from,\n                            type: \"userCommand\",\n                            totalFees: parseInt(command.fee),\n                            totalSent: parseInt(command.amount),\n                            totalTransactions: 1\n                        }\n                    }\n                });\n            }\n            if (filterOn === \"transactionFees\" || filterOn ===  \"all\") { \n                // Get Transaction Fees\n                node.transactions.userCommands.forEach(command => {\n                    const key = \"transactionFee-\" + command.from + blockProducer\n                    if ( key in receivedTransactions ){\n                        receivedTransactions[key].totalSent += parseInt(command.fee)\n                        receivedTransactions[key].totalTransactions += 1\n                    } \n                    else { \n                        receivedTransactions[key] = {\n                            id: key,\n                            target: blockProducer,\n                            source: command.from,\n                            type: \"transactionFee\",\n                            totalSent: parseInt(command.fee),\n                            totalFees: 0,\n                            totalTransactions: 1\n                        }\n                    }\n                });\n            }\n            \n            if (filterOn ===  \"feeTransfers\" || filterOn ===  \"all\") { \n                // Get Fee Transfers (Block Producer -> Snark Worker)\n                node.transactions.feeTransfer.forEach(transfer => {\n                    const key = \"feeTransfer-\" + blockProducer + \"-\" + transfer.recipient\n                    if ( key in receivedTransactions ){\n                        receivedTransactions[key].totalFees += parseInt(transfer.fee)\n                        receivedTransactions[key].totalTransactions += 1\n                    }\n                    else {\n                        receivedTransactions[key] = {\n                            id: key,\n                            target: transfer.recipient,\n                            source: blockProducer,\n                            type: \"feeTransfer\",\n                            totalSent: parseInt(transfer.fee),\n                            totalFees: 0, \n                            totalTransactions: 1\n                        }\n                    }\n                })\n            }\n        });\n    }  \n\n    let txKeys = Object.keys(receivedTransactions)\n\n    // Compute New Nodes\n    const observedKeys = txKeys.map((txKey) => {\n        let tx = receivedTransactions[txKey]\n        return [tx.source, tx.target]\n    }).flat()\n\n    \n    const dedupedKeys = observedKeys.filter(function(item, pos) {\n        return observedKeys.indexOf(item) == pos;\n    })\n\n    //console.log(\"dedupedKeys: \", observedKeys)\n\n    const newKeys = dedupedKeys.filter((key) => {\n        return !(key in nodeIndex)\n    })\n\n    const newNodes = newKeys.map(key => {\n        return {\n            id: key, \n            name: knownKeys[key],\n            publicKey: key,\n        }\n    })\n\n    // Compute New Links\n    const observedLinks = Object.values(receivedTransactions)\n\n    const newLinks = observedLinks.filter((link) => {\n        const key = link.id\n        return !(key in linkIndex)\n    })\n\n    // If the filter properties have changed \n    // Clear out nodes, links, and indexes\n    if ( state !== prevState && prevState !== undefined) {\n        console.log(state, prevState)\n        setData(({nodes, links}) => {\n            return {\n                nodes: [],\n                links: []\n            }\n        })\n        setNodeIndex((index) => {\n            return {}\n        })\n        setLinkIndex((index) => {\n            return {}\n        })\n        prevStateRef.current = state;\n    }\n    \n    // Add New Nodes\n    if ( newNodes ){\n        newNodes.forEach(newNode => {\n            setData(({nodes, links}) => {\n                setNodeIndex((index) => {\n                    index[newNode.id] = nodes.length\n                    return index\n                })\n                return {\n                    nodes: [...nodes, newNode],\n                    links: links\n                }\n            })\n        })\n    }\n\n    // Add New Links\n    if ( newLinks ) {\n        newLinks.forEach(link => {\n            if ( link.target in nodeIndex && link.source in nodeIndex ){\n                setData(({nodes, links}) => {\n                    setLinkIndex((index) => {\n                        index[link.id] = links.length\n                        return index\n                    })\n                    return {\n                        nodes: nodes,\n                        links: [...links, link]\n                    }\n                })\n            }\n        })\n    }\n        \n\n    // Check if data has Updated\n\n\n    return <ForceGraph2D\n    d3VelocityDecay={0.7}\n    ref={fgRef}\n    enableNodeDrag={true}\n    nodeLabel={(node) => {\n        return `Discord: ${node.name} </br>\n        Public Key: ${node.publicKey.substring(0,8)}\n        `\n    }}\n    linkLabel={(link) => {\n        if (link.type === \"userCommand\") {\n            return `User Commands: ${link.source.name} -> ${link.target.name} </br>\n            Total Transactions: ${link.totalTransactions} </br>\n            Total Sent: ${link.totalSent} </br>\n            `\n        }\n        if (link.type === \"feeTransfer\") {\n            return `Fee Transfers: ${link.source.name} -> ${link.target.name} </br>\n            Total Transfers: ${link.totalTransactions} </br>\n            Fees Collected: ${link.totalSent} </br>\n            `\n        }\n        if (link.type === \"transactionFee\") {\n            return `Transaction Fees: ${link.source.name} -> ${link.target.name} </br>\n            Total Transfers: ${link.totalTransactions} </br>\n            Fees Collecteds: ${link.totalSent} </br>\n            `\n        }\n    }}\n    linkCurvature={.25}\n    linkDirectionalArrowLength={5}\n    linkWidth={(link) => {\n        const nTx = link.totalTransactions\n        // if (nTx < 5) return 1\n        // if (nTx < 25) return 2\n        // if (nTx < 50) return 3\n        // if (nTx < 100) return 4\n        // if (nTx < 250) return 5\n        // if (nTx < 500) return 6\n        const nSent = link.totalSent \n        if (nSent <= 50) return 1\n        if (nSent < 350) return 2\n        if (nSent < 500) return 3\n        if (nSent < 800) return 4\n        if (nSent < 1000) return 5\n        if (nSent < 1300) return 6\n        return 10\n    }}\n    linkColor={(link) => {\n        // let max = 400;\n        // let rainbow = new Rainbow(); \n        // rainbow.setNumberRange(0, 750);\n        // rainbow.setSpectrum(\"grey\", \"green\", \"yellow\", \"orange\", \"red\");\n        if (link.type === \"userCommand\") return \"blue\";\n        if (link.type === \"feeTransfer\") return \"orange\";\n        if (link.type === \"transactionFee\") return \"red\";\n        return \"black\"\n            \n    }}\n    graphData={data}\n    />;\n};\n\nconst GET_BLOCKS = gql`\nquery MyQuery {\n    blocks(first: 500) {\n      nodes {\n        transactions {\n          feeTransfer {\n            fee\n            recipient\n          }\n          userCommands {\n            fee\n            from\n            to\n            id\n            amount\n          }\n        }\n        creator\n      }\n    }\n}`\n\nexport default DynamicGraph","import { Gradient } from 'react-gradient';\nimport React from 'react';\nimport * as d3 from \"d3\"\n\nconst { useState, useEffect, useRef, useCallback} = React;\n\n\nconst gradients = [\n    [\"grey\", \"green\", \"yellow\", \"orange\", \"red\"],\n  ];\n\nconst Legend = () => {\n    // create a list of keys\n    useEffect(() => {\n        var Svg = d3.select(\"#my_dataviz2\")\n\n        Svg.append(\"rect\").attr(\"x\",47).attr(\"y\",27).attr(\"width\", 20).attr(\"height\", 6).style(\"fill\", \"blue\")\n        Svg.append(\"rect\").attr(\"x\",47).attr(\"y\",87).attr(\"width\", 20).attr(\"height\", 6).style(\"fill\", \"red\")\n        Svg.append(\"rect\").attr(\"x\",47).attr(\"y\",147).attr(\"width\", 20).attr(\"height\", 6).style(\"fill\", \"orange\")\n        //Svg.append(\"circle\").attr(\"cx\",50).attr(\"cy\",50).attr(\"r\", 6).style(\"fill\", \"red\")\n        //Svg.append(\"circle\").attr(\"cx\",50).attr(\"cy\",70).attr(\"r\", 6).style(\"fill\", \"orange\")\n        Svg.append(\"text\").attr(\"x\", 80).attr(\"y\", 30).text(\"User Commands\").style(\"font-size\", \"30px\").attr(\"alignment-baseline\",\"middle\")\n        Svg.append(\"text\").attr(\"x\", 80).attr(\"y\", 90).text(\"Transaction Fees\").style(\"font-size\", \"30px\").attr(\"alignment-baseline\",\"middle\")\n        Svg.append(\"text\").attr(\"x\", 80).attr(\"y\", 150).text(\"Fee Transfers\").style(\"font-size\", \"30px\").attr(\"alignment-baseline\",\"middle\")\n\n        Svg.append(\"circle\").attr(\"cx\", 50).attr(\"cy\",210).attr(\"r\", 12).style(\"fill\", \"navy\")\n        Svg.append(\"text\").attr(\"x\", 80).attr(\"y\", 210).text(\"Wallet\").style(\"font-size\", \"30px\").attr(\"alignment-baseline\",\"middle\")\n    })\n    return (\n        <div>\n            <svg id=\"my_dataviz2\" height=\"300\" width=\"450\"></svg>\n        </div>\n    );\n}\nexport default Legend","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { GiPayMoney, GiGearHammer, GiTakeMyMoney } from \"react-icons/gi\";\nimport { AiOutlinePlusCircle } from \"react-icons/ai\";\nimport DynamicGraph from './transactions/transactions';\nimport Legend from './transactions/legend';\n\nconst { useState, useEffect, useRef, useCallback } = React;\n\nfunction Control({ filterGraph }) {\n  return (\n    <div class=\"graph-filters\">\n      <div className=\"filter-icon\" onClick={() => filterGraph(\"userCommands\")}><GiPayMoney /></div>\n      <div className=\"filter-icon\" onClick={() => filterGraph(\"feeTransfers\")}><GiGearHammer /></div>\n      <div className=\"filter-icon\" onClick={() => filterGraph(\"transactionFees\")}><GiTakeMyMoney /></div>\n      <div className=\"filter-icon\" onClick={() => filterGraph(\"all\")}><AiOutlinePlusCircle /></div>\n    </div>\n  )\n}\n\n\nfunction App() {\n  const [state, setState] = useState({filterOn: \"userCommands\"})\n\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <h1>CODA Graph Viewer</h1>\n      </div>\n      <div className=\"app-container\">\n        <Control filterGraph={(filterOn) => {\n          setState({ filterOn: filterOn })\n        }}/>\n        <div className=\"legend\">\n          <Legend/>\n        </div>\n        <div className=\"graph\">\n          <DynamicGraph filterOn={state.filterOn}>\n            {/* <Blocks/> */}\n          </DynamicGraph>\n        </div>\n        \n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloProvider } from 'react-apollo';\n\nimport client from './client';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}